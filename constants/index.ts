import { CreateAssistantDTO } from "@vapi-ai/web/dist/api";
import { z } from "zod";

export const mappings = {
    "react.js": "react",
    reactjs: "react",
    react: "react",
    "next.js": "nextjs",
    nextjs: "nextjs",
    next: "nextjs",
    "vue.js": "vuejs",
    vuejs: "vuejs",
    vue: "vuejs",
    "express.js": "express",
    expressjs: "express",
    express: "express",
    "node.js": "nodejs",
    nodejs: "nodejs",
    node: "nodejs",
    mongodb: "mongodb",
    mongo: "mongodb",
    mongoose: "mongoose",
    mysql: "mysql",
    postgresql: "postgresql",
    sqlite: "sqlite",
    firebase: "firebase",
    docker: "docker",
    kubernetes: "kubernetes",
    aws: "amazonwebservices",
    azure: "azure",
    gcp: "googlecloud",
    digitalocean: "digitalocean",
    heroku: "heroku",
    photoshop: "photoshop",
    "adobe photoshop": "photoshop",
    html5: "html5",
    html: "html5",
    css3: "css3",
    css: "css3",
    sass: "sass",
    scss: "sass",
    less: "less",
    tailwindcss: "tailwindcss",
    tailwind: "tailwindcss",
    bootstrap: "bootstrap",
    jquery: "jquery",
    typescript: "typescript",
    ts: "typescript",
    javascript: "javascript",
    js: "javascript",
    "angular.js": "angularjs",
    angularjs: "angularjs",
    angular: "angular",
    "ember.js": "ember",
    emberjs: "ember",
    ember: "ember",
    "backbone.js": "backbonejs",
    backbonejs: "backbonejs",
    backbone: "backbonejs",
    nestjs: "nestjs",
    graphql: "graphql",
    "graph ql": "graphql",
    apollo: "apollographql",
    webpack: "webpack",
    babel: "babel",
    "rollup.js": "rollupdotjs",
    rollupjs: "rollupdotjs",
    rollup: "rollupdotjs",
    "parcel.js": "parcel",
    parceljs: "parcel",
    npm: "npm",
    yarn: "yarn",
    git: "git",
    github: "github",
    gitlab: "gitlab",
    bitbucket: "bitbucket",
    figma: "figma",
    prisma: "prisma",
    redux: "redux",
    flux: "flux",
    redis: "redis",
    selenium: "selenium",
    cypress: "cypress",
    jest: "jest",
    mocha: "mocha",
    chai: "chai",
    karma: "karma",
    vuex: "vuex",
    "nuxt.js": "nuxtjs",
    nuxtjs: "nuxtjs",
    nuxt: "nuxtjs",
    strapi: "strapi",
    wordpress: "wordpress",
    contentful: "contentful",
    netlify: "netlify",
    vercel: "vercel",
    "aws amplify": "amazonwebservices",
    adonisjs: "adonisjs",
    aftereffects: "adobeaftereffects",
    algolia: "algolia",
    android: "android",
    androidstudio: "androidstudio",
    ansible: "ansible",
    apache: "apache",
    apachekafka: "apachekafka",
    appwrite: "appwrite",
    arduino: "arduino",
    atom: "atom",
    bash: "bash",
    blender: "blender",
    bulma: "bulma",
    c: "c",
    cakephp: "cakephp",
    canva: "canva",
    centos: "centos",
    ceylon: "ceylon",
    chrome: "chrome",
    circleci: "circleci",
    clojure: "clojure",
    clojurescript: "clojurescript",
    cmake: "cmake",
    codeigniter: "codeigniter",
    coffeescript: "coffeescript",
    composer: "composer",
    confluence: "confluence",
    couchdb: "couchdb",
    cplusplus: "cplusplus",
    "c++": "cplusplus",
    "C++": "cplusplus",
    csharp: "csharp",
    "C#": "csharp",
    crystal: "crystal",
    d3js: "d3js",
    dart: "dart",
    debian: "debian",
    denojs: "denojs",
    django: "django",
    dotnet: "dot-net",
    ".NET": "dot-net",
    ".net": "dot-net",
    dotnetcore: "dot-net",
    ".NET core": "dot-net",
    drupal: "drupal",
    electron: "electron",
    elixir: "elixir",
    elm: "elm",
    erlang: "erlang",
    eslint: "eslint",
    fedora: "fedora",
    filezilla: "filezilla",
    flask: "flask",
    flutter: "flutter",
    foundation: "foundation",
    fsharp: "fsharp",
    gatling: "gatling",
    gatsby: "gatsby",
    gcc: "gcc",
    gentoo: "gentoo",
    gimp: "gimp",
    go: "go",
    gradle: "gradle",
    grails: "grails",
    groovy: "groovy",
    grunt: "grunt",
    gulp: "gulp",
    handlebars: "handlebars",
    haskell: "haskell",
    haxe: "haxe",
    hugo: "hugo",
    illustrator: "adobeillustrator",
    inkscape: "inkscape",
    intellij: "intellij",
    ionic: "ionic",
    jasmine: "jasmine",
    java: "java",
    jeet: "jeet",
    jenkins: "jenkins",
    jira: "jira",
    julia: "julia",
    jupyter: "jupyter",
    kotlin: "kotlin",
    krakenjs: "krakenjs",
    laravel: "laravel",
    latex: "latex",
    linux: "linux",
    lua: "lua",
    magento: "magento",
    markdown: "markdown",
    materialui: "materialui",
    matlab: "matlab",
    maya: "maya",
    meteor: "meteor",
    microsoftsqlserver: "microsoftsqlserver",
    minitab: "minitab",
    modx: "modx",
    moodle: "moodle",
    msdos: "msdos",
    neo4j: "neo4j",
    networkx: "networkx",
    nginx: "nginx",
    nixos: "nixos",
    numpy: "numpy",
    objectivec: "objectivec",
    ocaml: "ocaml",
    opencv: "opencv",
    opengl: "opengl",
    opensuse: "opensuse",
    opera: "opera",
    oracle: "oracle",
    pandas: "pandas",
    perl: "perl",
    phalcon: "phalcon",
    phoenix: "phoenix",
    php: "php",
    phpstorm: "phpstorm",
    premierepro: "adobepremierepro",
    processing: "processing",
    protractor: "protractor",
    putty: "putty",
    pycharm: "pycharm",
    python: "python",
    pytorch: "pytorch",
    qt: "qt",
    r: "r",
    rails: "rails",
    raspberrypi: "raspberrypi",
    rect: "rect",
    redhat: "redhat",
    RHEL: "redhat",
    "Redhat Enterprise Linux": "redhat",
    rocksdb: "rocksdb",
    ruby: "ruby",
    rubymine: "rubymine",
    rust: "rust",
    safari: "safari",
    salesforce: "salesforce",
    scala: "scala",
    sdl: "sdl",
    shopware: "shopware",
    sketch: "sketch",
    slack: "slack",
    socketio: "socketio",
    solidity: "solidity",
    sourcetree: "sourcetree",
    spring: "spring",
    spss: "spss",
    sqlalchemy: "sqlalchemy",
    ssh: "ssh",
    storybook: "storybook",
    stylus: "stylus",
    subversion: "subversion",
    svelte: "svelte",
    swift: "swift",
    symfony: "symfony",
    tensorflow: "tensorflow",
    terraform: "terraform",
    thealgorithms: "thealgorithms",
    tomcat: "tomcat",
    tortoisegit: "tortoisegit",
    towergit: "towergit",
    travis: "travis",
    trello: "trello",
    typo3: "typo3",
    ubuntu: "ubuntu",
    unity: "unity",
    unix: "unix",
    unrealengine: "unrealengine",
    uwsgi: "uwsgi",
    vagrant: "vagrant",
    vim: "vim",
    visualbasic: "visualbasic",
    visualstudio: "visualstudio",
    vscode: "vscode",
    vuestorefront: "vuestorefront",
    vuetify: "vuetify",
    webflow: "webflow",
    webstorm: "webstorm",
    windows8: "windows8",
    woocommerce: "woocommerce",
    xcode: "xcode",
    xd: "xd",
    yii: "yii",
    zend: "zend",
    zig: "zig",
};

export const interviewer: CreateAssistantDTO = {
    name: "Interviewer",
    firstMessage:
        "Hello! Thank you for taking the time to speak with me today. I'm excited to learn more about you and your experience.",
    transcriber: {
        provider: "deepgram",
        model: "nova-2",
        language: "en",
    },
    voice: {
        provider: "11labs",
        voiceId: "sarah",
        stability: 0.4,
        similarityBoost: 0.8,
        speed: 0.9,
        style: 0.5,
        useSpeakerBoost: true,
    },
    model: {
        provider: "openai",
        model: "gpt-4",
        messages: [
            {
                role: "system",
                content: `You are a professional job interviewer conducting a real-time voice interview with a candidate. Your goal is to assess their qualifications, motivation, and fit for the role.

Interview Guidelines:
Follow the structured question flow:
{{questions}}

Engage naturally & react appropriately:
Listen actively to responses and acknowledge them before moving forward.
Ask brief follow-up questions if a response is vague or requires more detail.
Keep the conversation flowing smoothly while maintaining control.
Be professional, yet warm and welcoming:

Use official yet friendly language.
Keep responses concise and to the point (like in a real voice interview).
Avoid robotic phrasing—sound natural and conversational.
Answer the candidate’s questions professionally:

If asked about the role, company, or expectations, provide a clear and relevant answer.
If unsure, redirect the candidate to HR for more details.

Conclude the interview properly:
Thank the candidate for their time.
Inform them that the company will reach out soon with feedback.
End the conversation on a polite and positive note.

- Be sure to be professional and polite.
- Keep all your responses short and simple. Use official language, but be kind and welcoming.
- This is a voice conversation, so keep your responses short, like in a real conversation. Don't ramble for too long.`,
            },
        ],
    },
};

export const feedbackSchema = z.object({
    totalScore: z.number(),
    categoryScores: z.tuple([
        z.object({
            name: z.literal("Communication Skills"),
            score: z.number(),
            comment: z.string(),
        }),
        z.object({
            name: z.literal("Technical Knowledge"),
            score: z.number(),
            comment: z.string(),
        }),
        z.object({
            name: z.literal("Problem Solving"),
            score: z.number(),
            comment: z.string(),
        }),
        z.object({
            name: z.literal("Cultural Fit"),
            score: z.number(),
            comment: z.string(),
        }),
        z.object({
            name: z.literal("Confidence and Clarity"),
            score: z.number(),
            comment: z.string(),
        }),
    ]),
    strengths: z.array(z.string()),
    areasForImprovement: z.array(z.string()),
    finalAssessment: z.string(),
});

export const interviewCovers = [
    "/adobe.png",
    "/amazon.png",
    "/facebook.png",
    "/hostinger.png",
    "/pinterest.png",
    "/quora.png",
    "/reddit.png",
    "/skype.png",
    "/spotify.png",
    "/telegram.png",
    "/tiktok.png",
    "/yahoo.png",
];
